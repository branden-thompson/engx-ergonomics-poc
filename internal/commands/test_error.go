package commands

import (
	"fmt"
	"os"

	"github.com/bthompso/engx-ergonomics-poc/internal/chaos"
	"github.com/spf13/cobra"
)

// NewTestErrorCommand creates a test command that always generates errors for template testing
func NewTestErrorCommand() *cobra.Command {
	var errorType string
	var severity string
	var chaosMode bool

	cmd := &cobra.Command{
		Use:   "test-error",
		Short: "Test error message formatting (development tool)",
		Long: `Test command that always generates errors for testing error message templates and formatting.

This is a development tool for testing error presentation and chaos marine error messages.

Examples:
  engx test-error --type=network_failure
  engx test-error --type=permission_denied --severity=critical
  engx test-error --type=resource_exhausted --chaos --severity=fatal`,
		RunE: func(cmd *cobra.Command, args []string) error {
			// Parse severity
			var sev chaos.ErrorSeverity
			switch severity {
			case "info":
				sev = chaos.SeverityInfo
			case "warning":
				sev = chaos.SeverityWarning
			case "critical":
				sev = chaos.SeverityCritical
			case "fatal":
				sev = chaos.SeverityFatal
			default:
				sev = chaos.SeverityCritical
			}

			// Create error template based on type
			var template *chaos.ErrorTemplate

			if chaosMode {
				// Create chaos-generated error
				template = chaos.NewChaosErrorTemplate(errorType, "test-error", "Error Template Testing", chaos.Scout)

				// Use predefined template if available
				if predefined, exists := chaos.DefaultErrorTemplates[errorType]; exists {
					template.BottomLineMessage = predefined.BottomLineMessage
					template.FirstAction = predefined.FirstAction
					template.SecondAction = predefined.SecondAction
					template.Summary = predefined.Summary
					template.AdditionalContext = predefined.AdditionalContext
					template.OnCallCrew = predefined.OnCallCrew
					template.StackTrace = generateMockStackTrace(errorType)
				} else {
					// Generic chaos error
					template.BottomLineMessage = fmt.Sprintf("Chaos Marine generated %s error", errorType)
					template.FirstAction = "Retry the operation"
					template.SecondAction = "Check the chaos marine documentation"
					template.Summary = fmt.Sprintf("This is a simulated %s error generated by the Chaos Marine for educational purposes.", errorType)
					template.AdditionalContext = "This error is intentionally generated to help you practice troubleshooting and recovery procedures."
					template.StackTrace = generateMockStackTrace(errorType)
				}
			} else {
				// Create real system error
				template = chaos.NewRealErrorTemplate("test-error", "Error Template Testing")

				if predefined, exists := chaos.DefaultErrorTemplates[errorType]; exists {
					template.BottomLineMessage = predefined.BottomLineMessage
					template.FirstAction = predefined.FirstAction
					template.SecondAction = predefined.SecondAction
					template.Summary = predefined.Summary
					template.AdditionalContext = predefined.AdditionalContext
					template.OnCallCrew = predefined.OnCallCrew
					template.StackTrace = generateMockStackTrace(errorType)
				} else {
					// Generic real error
					template.BottomLineMessage = fmt.Sprintf("Real system error of type: %s", errorType)
					template.FirstAction = "Check system logs"
					template.SecondAction = "Contact system administrator"
					template.Summary = fmt.Sprintf("A real %s error occurred in the system.", errorType)
					template.AdditionalContext = "This appears to be a genuine system error that requires investigation."
					template.StackTrace = generateMockStackTrace(errorType)
				}
			}

			// Format and display the error
			errorMessage := template.FormatError(sev)
			fmt.Fprint(os.Stderr, errorMessage)
			fmt.Fprintln(os.Stderr) // Add final newline

			// Exit with non-zero code but don't return error to avoid usage display
			os.Exit(1)
			return nil // Unreachable but required for compilation
		},
	}

	// Add flags
	cmd.Flags().StringVar(&errorType, "type", "network_failure", "Type of error to generate (network_failure, permission_denied, resource_exhausted, dependency_conflict)")
	cmd.Flags().StringVar(&severity, "severity", "critical", "Error severity level (info, warning, critical, fatal)")
	cmd.Flags().BoolVar(&chaosMode, "chaos", true, "Generate chaos marine error (false for real system error)")

	return cmd
}

// generateMockStackTrace creates a realistic stack trace for testing
func generateMockStackTrace(errorType string) string {
	traces := map[string]string{
		"network_failure": `  Stack Trace:
   at npmInstall (/usr/local/lib/node_modules/npm/lib/install.js:142:15)
   at fetchPackage (/usr/local/lib/node_modules/npm/lib/fetch.js:87:12)
   at Registry.request (/usr/local/lib/node_modules/npm/lib/registry.js:234:9)
   at ClientRequest.onError (/usr/local/lib/node_modules/npm/lib/request.js:156:21)
   Error: ENOTFOUND registry.npmjs.org
   Code: ENOTFOUND
   Errno: -3008`,

		"permission_denied": `  Stack Trace:
   at mkdir (/usr/local/lib/node_modules/engx/lib/filesystem.js:45:18)
   at createProjectStructure (/usr/local/lib/node_modules/engx/lib/creator.js:123:7)
   at executeStep (/usr/local/lib/node_modules/engx/lib/runner.js:89:12)
   at processStep (/usr/local/lib/node_modules/engx/lib/progress.js:67:5)
   Error: EACCES: permission denied, mkdir '/restricted/project'
   Code: EACCES
   Errno: -13`,

		"resource_exhausted": `  Stack Trace:
   at writeFile (/usr/local/lib/node_modules/engx/lib/filesystem.js:78:14)
   at generateFiles (/usr/local/lib/node_modules/engx/lib/generator.js:156:9)
   at createProject (/usr/local/lib/node_modules/engx/lib/creator.js:201:11)
   at executeCommand (/usr/local/lib/node_modules/engx/lib/runner.js:134:8)
   Error: ENOSPC: no space left on device, write
   Code: ENOSPC
   Errno: -28`,

		"dependency_conflict": `  Stack Trace:
   at resolvePackage (/usr/local/lib/node_modules/npm/lib/resolver.js:178:22)
   at validateDependencies (/usr/local/lib/node_modules/npm/lib/validator.js:89:15)
   at installPackages (/usr/local/lib/node_modules/npm/lib/installer.js:145:9)
   at npmInstall (/usr/local/lib/node_modules/npm/lib/install.js:167:12)
   Error: Conflicting peer dependency: react@17.0.0 vs react@18.0.0
   Code: ERESOLVE
   Dependency: @testing-library/react`,
	}

	if trace, exists := traces[errorType]; exists {
		return trace
	}

	// Generic stack trace
	return `  Stack Trace:
   at executeOperation (/usr/local/lib/node_modules/engx/lib/runner.js:234:18)
   at processCommand (/usr/local/lib/node_modules/engx/lib/processor.js:78:11)
   at main (/usr/local/lib/node_modules/engx/bin/engx:145:7)
   Error: ` + errorType + ` error occurred
   Code: EGENERIC`
}